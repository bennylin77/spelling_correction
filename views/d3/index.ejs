<!DOCTYPE html>
<html lang="en">
	<%- include('../layouts/head') %>
	<body>
	<%- include('../layouts/menu') %>



	<style>
	svg {
		/*font-size: 11.8px;*/
		font-size: 12.5px
	}
	</style>

	<script src="//d3js.org/d3.v3.min.js"></script>
	<script>

	var width = 800,
	    height = 800,
	    radius = Math.min(width, height) / 2,
	    color = d3.scale.category20c();

	var svg = d3.select("body").append("svg")
	    .attr("width", width)
	    .attr("height", height)
	  	.append("g")
	    .attr("transform", "translate(" + width / 2 + "," + height * .52 + ")");

	var partition = d3.layout.partition()
	    .sort(null)
	    .size([2 * Math.PI, radius * radius])
	    .value(function(d) { return d.size; });

	var arc = d3.svg.arc()
	    .startAngle(function(d) { return d.x; })
	    .endAngle(function(d) { return d.x + d.dx; })
	    .innerRadius(function(d) { return Math.sqrt(d.y); })
	    .outerRadius(function(d) { return Math.sqrt(d.y + d.dy); });

	var root = <%-JSON.stringify(data)%>;

	//d3.json("/flare.json", function(error, root) {
  //  if (error) throw error;
/*
	  var path = svg.datum(root).selectAll("path")
	      .data(partition.nodes)
	    	.enter().append("path")
	      .attr("display", function(d) { return d.depth ? null : "none"; }) // hide inner ring
	      .attr("d", arc)
	      .style("stroke", "#fff")
	      .style("fill", function(d) { return color((d.children ? d : d.parent).name); })
	      .style("fill-rule", "evenodd")
	      .each(stash);
*/
		// For efficiency, filter nodes to keep only those large enough to see.
		var nodes = partition.nodes(root)
				//.filter(function(d) {
				//	return (d.dx > 0.0001); // 0.005 radians = 0.29 degrees
				//});


		var path = svg.datum(root).selectAll("path")
		  .data(nodes)
		  .enter().append("g")

		path.append("path")
		  .attr("display", function(d) { return d.depth ? null : "none"; }) // hide inner ring
		  .attr("d", arc)
		  .style("fill", function(d) {
				/*
				if( d.children )
					return color(d.name);
				else{
					//console.log(d);
					return color(d.parent.name);
				}*/
				//return color((d.children ? d : d.parent).name);
				if( d.name == "the")
					return "#a1d99b"
				else
					return d.children ? color(d.name) : "#ffffff";
			})
		  .style("fill-rule", "evenodd")
		  .each(stash);
			 //.style("stroke", "#eeeeee")

		//0.045//Math.round( (d.dx*180)/Math.PI)
		path.append("text")
		        .text(function(d) { if(d.name!="sentence_end" && d.dx > 0.07 )
						  										if(d.y >= 16000)
																		return truncate(d.name, 8)
																	else
																		return d.name;})
						.style({"font-size": function(d) { 	if(d.y >= 25000)
																									return "90%"
																								else if(d.y >= 16000)
																									return "90%"
																								else if(d.y >= 8000)
																										return "90%"
																								else
																									return "90%;" }})
		        .classed("label", true)
		        .attr("x", function(d) { return d.x; })
		        .attr("text-anchor", "middle")
		        // translate to the desired point and set the rotation
		        .attr("transform", function(d) {
		            if (d.depth > 0) {
		                return "translate(" + arc.centroid(d) + ")" +
		                       "rotate(" + getAngle(d) + ")";
		            }  else {
		                return null;
		            }
		        })
		        .attr({"dx": function(d) {
										if(d.x > 3.1)
		                	return -5;
										else
											return -1;

		        }})
		        .attr("dy", ".35em") // vertical-align
		        .attr("pointer-events", "none");




	//});

	function getAngle(d) {
	    // Offset the angle by 90 deg since the '0' degree axis for arc is Y axis, while
	    // for text it is the X axis.
	    var thetaDeg = (180 / Math.PI * (arc.startAngle()(d) + arc.endAngle()(d)) / 2 - 90);
	    // If we are rotating the text by more than 90 deg, then "flip" it.
	    // This is why "text-anchor", "middle" is important, otherwise, this "flip" would
	    // a little harder.
	    return (thetaDeg > 90) ? thetaDeg - 180 : thetaDeg;
	}


	// Stash the old values for transition.
	function stash(d) {
	  d.x0 = d.x;
	  d.dx0 = d.dx;
	}

	// Interpolate the arcs in data space.
	function arcTween(a) {
	  var i = d3.interpolate({x: a.x0, dx: a.dx0}, a);
	  return function(t) {
	    var b = i(t);
	    a.x0 = b.x;
	    a.dx0 = b.dx;
	    return arc(b);
	  };
	}

	function truncate(str, max) {
	  return str.length > max ? str.substr(0, max-1) + '.' : str;
	}

	d3.select(self.frameElement).style("height", height + "px");

	</script>


	</body>
</html>
